{"version":3,"sources":["Fontawesome.js","components/barchart.js","components/lineChart.js","components/custom-table.js","components/areachart/areachart.js","components/chartCards/chartCard.js","components/stateMetricChart/stateMetricChart.js","components/radialBar/radialBar.js","components/national-dashboard.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faCode","faHighlighter","faArrowCircleDown","faArrowCircleUp","faArrowUp","Barchar","props","useState","options","series","chartdata","setChartdata","useEffect","colors","color","chart","id","foreColor","tooltip","y","formatter","value","seriesIndex","dataPointIndex","w","Intl","NumberFormat","format","xaxis","categories","labeles","hideOverlappingLabels","dataLabels","enabled","name","data","type","width","height","LineChart","console","log","annotations","x","borderColor","label","style","background","text","descendingComparator","a","b","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","classes","order","onRequestSort","TableHead","TableRow","map","headCell","TableCell","key","align","padding","sortDirection","className","cellheader","join","TableSortLabel","active","direction","onClick","property","event","visuallyHidden","useStyles","makeStyles","theme","root","paper","marginBottom","spacing","table","minWidth","border","clip","margin","overflow","position","top","container","maxHeight","whiteText","fontSize","backgroundColor","fontWeight","red","green","EnhancedTable","React","setOrder","setOrderBy","rowsData","setRowData","numberFormatter","number","TableContainer","Table","aria-labelledby","size","stickyHeader","aria-label","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","row","hover","tabIndex","state","component","scope","confirmed","recovered","deaths","recoveryRate","deathRate","AreaChart","zoom","toolbar","show","sparkline","stroke","curve","labels","crosshairs","dropShadow","yaxis","grid","legend","horizontalAlign","ChartCard","variance","parseInt","dailyValue","Paper","chartColor","totalValue","title","icon","StateMetricChart","states","count","forEach","element","push","custom","RadialBar","plotOptions","radialBar","hollow","showOn","offsetY","fill","lineCap","NationalDashboard","summarydata","setSummarydata","daily","cummulative","postivetrend","setPostivetrend","recoveredtrend","setRecoveredtrend","deathtrend","setDeathtrend","activetrend","setActivetrend","isdatavailable","setDataavailable","stateMetric","setStateMetric","stateWiseCount","setstateWiseCount","checkedPostive","checkedRecover","checkedDeath","setState","statewisetrend","setstatewisetrend","isStateDataAvailable","setStateDataAvailable","UTs","handleChange","target","checked","fetch","then","response","json","dailyconfirmed","cases_time_series","length","dailydeceased","dailyrecovered","dailyactive","totalconfirmed","totaldeceased","totalrecovered","totalactive","parseFloat","toFixed","StateMetrics","highestConfirmed","lowestConfirmed","highestDeaths","lowestDeaths","highestRecoverRate","lowestRecoverRate","highestDeathRate","lowestDeathRate","date","toString","stateWiseData","stateWiseDataOnly","statewise","includes","statecode","Switch","onChange","inputProps","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.436ad15a.chunk.js","sourcesContent":["// import the library\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\n// import your icons\r\nimport { faCode, faHighlighter,faArrowCircleDown,faArrowCircleUp,faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(\r\n  faCode,\r\n  faHighlighter,\r\n  faArrowCircleDown,\r\n  faArrowCircleUp,\r\n  faArrowUp\r\n  // more icons go here\r\n);","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\n\r\nfunction Barchar(props) {\r\n    const [chartdata, setChartdata] = useState({options:{},series:[]});\r\n\r\n    useEffect(() => {\r\n      //  console.log(props);\r\n\r\n        var options = {\r\n            colors: [props.color],\r\n            chart: {\r\n                id: \"basic-bar\",\r\n                foreColor: 'blue'\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                  formatter: function(value, { series, seriesIndex, dataPointIndex, w }) {\r\n                    return new Intl.NumberFormat('en-IN').format(value)\r\n                  }\r\n                }\r\n            },\r\n            xaxis: {\r\n                categories: props.categories,\r\n                labeles: {\r\n                    hideOverlappingLabels: true,\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n   \r\n        }\r\n\r\n        var series = [\r\n            {\r\n                name: \"count\",\r\n                data: props.data\r\n            }]\r\n            setChartdata({options:options,series:series})\r\n    },[props])\r\n\r\n    return (\r\n        <div>\r\n            <Chart\r\n                options={chartdata.options}\r\n                series={chartdata.series}\r\n                type=\"bar\"\r\n                width=\"100%\"\r\n                height=\"400px\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Barchar;","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nfunction LineChart(props) {\r\n\r\n    const [chartdata, setChartdata] = useState({ options: {}, series: [] });\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props);\r\n\r\n        var options = {\r\n            colors: [props.color],\r\n            chart: {\r\n                id: \"basic-bar\",\r\n                foreColor: 'blue'\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                  formatter: function(value, { series, seriesIndex, dataPointIndex, w }) {\r\n                    return new Intl.NumberFormat('en-IN').format(value)\r\n                  }\r\n                }\r\n            },\r\n            annotations: {\r\n                xaxis: [\r\n                  {\r\n                    x:\"31 May \",\r\n                    borderColor: '#c2c2c2',\r\n                    label: {\r\n                      style: {\r\n                        color: 'black',\r\n                        background:'#0080ff'\r\n                      },\r\n                      text: 'Lock Down Ended'\r\n                    }\r\n                  }\r\n                ]\r\n              },\r\n            xaxis: {\r\n                categories: props.categories,\r\n                labeles: {\r\n                    hideOverlappingLabels: true,\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n                \r\n            },\r\n\r\n        }\r\n\r\n        var series = [\r\n            {\r\n                name: \"count\",\r\n                data: props.data\r\n            }]\r\n      //  console.log({ options: options, series: series })\r\n        setChartdata({ options: options, series: series })\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n            <Chart\r\n                options={chartdata.options}\r\n                series={chartdata.series}\r\n                type=\"line\"\r\n                width=\"100%\"\r\n                height=\"400px\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineChart;","import React,{ useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {  makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'state', numeric: false, disablePadding: false, label: 'State' },\r\n  { id: 'confirmed', numeric: true, disablePadding: false, label: 'Confirmed Cases' },\r\n  { id: 'recovered', numeric: true, disablePadding: false, label: 'Recovered' },\r\n  { id: 'deaths', numeric: true, disablePadding: false, label: 'Deaths' },\r\n  { id: 'recoveryRate', numeric: true, disablePadding: false, label: 'Recovery Rate' },\r\n  { id: 'deathRate', numeric: true, disablePadding: false, label: 'Death Rate' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes,  order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.id===\"state\" ?\"left\":\"right\"}\r\n            padding=\"none\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={[classes.cellheader].join(' ')}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  container: {\r\n    maxHeight: 401,\r\n  },\r\n  whiteText:{\r\n    color:'#f0ffff',\r\n    fontSize: 12,\r\n    \r\n  },\r\n  cellheader:{\r\n    backgroundColor:'#677ea1',\r\n    fontSize: 12,\r\n    fontWeight: 600,\r\n    padding:6,\r\n\r\n  },\r\n  red:{\r\n    color:\"#ff0000\",\r\n    fontSize: 12,\r\n    fontWeight: 600\r\n  },\r\n  green:{\r\n    color:\"#33cc33\",\r\n    fontSize: 12,\r\n    fontWeight: 600\r\n  }\r\n\r\n\r\n}));\r\n\r\nexport default function EnhancedTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('confirmed');\r\n  //const [selected, setSelected] = React.useState([]);\r\n  //const [dense, setDense] = React.useState(false);\r\n  const [rowsData,setRowData]=React.useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n  //  console.log(props);\r\n   setRowData(props.data);\r\n  },[props]);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  function numberFormatter(number) {\r\n    return new Intl.NumberFormat('en-IN').format(number)\r\n}\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <TableContainer className={classes.container}>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            stickyHeader aria-label=\"sticky table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rowsData, getComparator(order, orderBy))\r\n                .map((row, index) => {\r\n                \r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.state}\r\n                      className={classes.whiteText}\r\n                    >\r\n                     \r\n                      <TableCell className={classes.whiteText} component=\"th\"  scope=\"row\" >\r\n                        {row.state}\r\n                      </TableCell>\r\n                      <TableCell className={classes.red}  align=\"right\">{numberFormatter(row.confirmed)}</TableCell>\r\n                      <TableCell className={classes.green}  align=\"right\">{numberFormatter(row.recovered)}</TableCell>\r\n                      <TableCell className={classes.red}  align=\"right\">{numberFormatter(row.deaths)}</TableCell>\r\n                      <TableCell className={classes.green}  align=\"right\">{row.recoveryRate}%</TableCell>\r\n                      <TableCell className={classes.red}  align=\"right\">{row.deathRate}%</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\n\r\nfunction AreaChart(props) {\r\n    const [chartdata, setChartdata] = useState({ options: {}, series: [] });\r\n\r\n    useEffect(() => {\r\n     //   console.log(props);\r\n        var options = {\r\n            colors: [props.color],\r\n            chart: {\r\n                type: 'area',\r\n                zoom: {\r\n                    enabled: false\r\n                },\r\n                toolbar: {\r\n                    show: false,\r\n                }\r\n            },\r\n            sparkline: {\r\n                enabled: true\r\n            },\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            stroke: {\r\n                curve: 'straight'\r\n            },\r\n            labels: props.labels,\r\n            xaxis: {\r\n                type: 'datetime',\r\n                labels: {\r\n                    show: false\r\n                },\r\n                crosshairs: {\r\n                    show: false,\r\n                    dropShadow: {\r\n                        enabled: false,\r\n                    }\r\n                }   \r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    show: false\r\n                },\r\n            },\r\n            grid: {\r\n                show: false\r\n            },\r\n            legend: {\r\n                horizontalAlign: 'left'\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                    formatter: function (value, { series, seriesIndex, dataPointIndex, w }) {\r\n                        return new Intl.NumberFormat('en-IN').format(value)\r\n                    }\r\n                },\r\n\r\n            }\r\n        };\r\n\r\n\r\n        var series = [\r\n            {\r\n                name: \"count\",\r\n                data: props.data\r\n            }]\r\n        setChartdata({ options: options, series: series })\r\n    }, [props]);\r\n\r\n    return (\r\n        <div>\r\n            <Chart\r\n                options={chartdata.options}\r\n                series={chartdata.series}\r\n                type=\"area\"\r\n                width=\"100%\"\r\n                height=\"200px\"\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AreaChart;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './chartCard.css';\r\nimport AreaChart from '../areachart/areachart';\r\n\r\nfunction ChartCard(props) {\r\n\r\n    let variance = parseInt(props.dailyValue)>=0?\"arrow-circle-up\":\"arrow-circle-down\";\r\n\r\n    return (\r\n        <Paper className=\"card-content\">\r\n            <div className=\"card-heading row\">\r\n                <div className=\"col-sm-6\">\r\n                <h1 className=\"value text-left\" style={{color:props.chartColor}}>{props.totalValue}</h1>\r\n                <h1 className = \"chartTitle text-left\" style={{color:props.chartColor}}>{props.title}</h1>\r\n                </div>\r\n                <div className=\"col-sm-6 text-right value\" style={{color:props.chartColor}}>\r\n                <span className=\"text-right\" >{props.dailyValue}</span>\r\n                <FontAwesomeIcon icon={variance} />\r\n                </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <AreaChart data={props.data} labels={props.labels} color={props.chartColor}></AreaChart>\r\n            </div>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default ChartCard;","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n//import ApexCharts from 'apexcharts';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './stateMetricChart.css'; \r\n\r\nfunction StateMetricChart(props) {\r\n  const [chartdata, setChartdata] = useState({ options: {}, series: [] });\r\n\r\n  useEffect(() => {\r\n    let states = [];\r\n    let count = [];\r\n    props.data.sort((a,b)=>{\r\n      return b.confirmed - a.confirmed;\r\n    });\r\n    props.data.forEach(element => {\r\n      states.push(element.state);\r\n      count.push(element.confirmed);\r\n    });\r\n    var options = {\r\n      colors: \"#ff0000\",\r\n      chart: {\r\n        id: \"basic-bar\",\r\n        foreColor: 'blue'\r\n      },\r\n      tooltip: {\r\n        custom: function({series, seriesIndex, dataPointIndex, w}) {\r\n\r\n          return '<div>'+\r\n          '<div className = \"row red\"'+\r\n          '<span style=\"{{textAlign:center}}\">'+props.data[dataPointIndex].state+'</span>'+\r\n          '</div>'+\r\n          '<ul>'+\r\n          '<li>Confirmed Cases: '+new Intl.NumberFormat('en-IN').format(props.data[dataPointIndex].confirmed)+'</li>'+\r\n          '<li>Recovered: '+new Intl.NumberFormat('en-IN').format(props.data[dataPointIndex].recovered)+'</li>'+\r\n          '<li>Deaths: '+new Intl.NumberFormat('en-IN').format(props.data[dataPointIndex].deaths)+'</li></ul></div>'\r\n        }\r\n        \r\n      },\r\n      xaxis: {\r\n        categories: states,\r\n        labeles: {\r\n          hideOverlappingLabels: true,\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n\r\n    }\r\n\r\n    var series = [\r\n      {\r\n        name: \"Confirmed Cases\",\r\n        data: count\r\n      }]\r\n    setChartdata({ options: options, series: series })\r\n  }, [props])\r\n\r\n  return (\r\n    <Paper className=\"card-content\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-4\">\r\n          <span className=\"chart-title\">State wise Count</span>\r\n        </div>\r\n\r\n      </div>\r\n      <div className=\"row chart\">\r\n        <div className=\"col-sm-12\">\r\n        <Chart\r\n          options={chartdata.options}\r\n          series={chartdata.series}\r\n          type=\"bar\"\r\n          width=\"100%\"\r\n          height=\"400px\"\r\n        />\r\n        </div>\r\n      </div>\r\n    </Paper>\r\n  )\r\n\r\n}\r\nexport default StateMetricChart; ","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport './radialBar.css'\r\n\r\nfunction RadialBar(props) {\r\n    const [chartdata, setChartdata] = useState({ options: {}, series: [] });\r\n  \r\n    useEffect(() => {\r\n        var options = {\r\n            plotOptions: {\r\n                radialBar: {\r\n                  hollow: {\r\n                    margin: 15,\r\n                    size: \"70%\",\r\n                  },                \r\n                  dataLabels: {\r\n                    showOn: \"always\",\r\n                    name: {\r\n                      offsetY: -10,\r\n                      show: true,\r\n                      color: props.color,\r\n                      fontSize: \"13px\"\r\n                    },\r\n                    value: {\r\n                      color: props.color,\r\n                      fontSize: \"30px\",\r\n                      show: true\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              fill:{\r\n                  colors:props.color\r\n              },\r\n              stroke: {\r\n                lineCap: \"round\",\r\n              },\r\n              labels: [props.name]\r\n      \r\n          };\r\n      \r\n          var series = [props.value]\r\n          setChartdata({ options: options, series: series })\r\n\r\n\r\n    },[props])\r\n\r\n    return(\r\n        <div className=\"row radialchart\">\r\n        <Chart\r\n          options={chartdata.options}\r\n          series={chartdata.series}\r\n          type=\"radialBar\"\r\n          width=\"100%\"\r\n          height=\"250px\"\r\n        />\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default RadialBar;\r\n","import React, { useState, useEffect } from \"react\";\r\n//import ReactDOM from 'react-dom';\r\n//import './dashboard.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import Chart from \"react-apexcharts\";\r\nimport Barchart from './barchart';\r\nimport LineChart from './lineChart';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport EnhancedTable from './custom-table';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ChartCard from './chartCards/chartCard'\r\nimport StateMetricChart from './stateMetricChart/stateMetricChart';\r\nimport RadialBar from './radialBar/radialBar';\r\nimport { scryRenderedDOMComponentsWithClass } from \"react-dom/test-utils\";\r\n\r\nfunction NationalDashboard() {\r\n    const [summarydata, setSummarydata] = useState({});\r\n    const [postivetrend, setPostivetrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    const [recoveredtrend, setRecoveredtrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    const [deathtrend, setDeathtrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    const [activetrend, setActivetrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    const [isdatavailable, setDataavailable] = useState(false);\r\n    const [stateMetric, setStateMetric] = useState({});\r\n    const [stateWiseCount, setstateWiseCount] = useState({});\r\n    const [state, setState] = useState({\r\n        checkedPostive: false,\r\n        checkedRecover: false,\r\n        checkedDeath: false,\r\n    });\r\n    const [statewisetrend, setstatewisetrend] = useState({});\r\n    const [isStateDataAvailable, setStateDataAvailable] = useState(false);\r\n    const UTs = [\"DN\", \"CH\", \"LA\", \"AN\", \"PY\", \"TT\", \"UN\", \"LD\"];\r\n    const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.covid19india.org/data.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // console.log(data); \r\n                //console.log(data.cases_time_series.length-1);\r\n                let summarydata = {};\r\n                summarydata.dailyconfirmed = data.cases_time_series[data.cases_time_series.length - 1].dailyconfirmed;\r\n                summarydata.dailydeceased = data.cases_time_series[data.cases_time_series.length - 1].dailydeceased;\r\n                summarydata.dailyrecovered = data.cases_time_series[data.cases_time_series.length - 1].dailyrecovered;\r\n                summarydata.dailyactive = summarydata.dailyconfirmed - summarydata.dailydeceased - summarydata.dailyrecovered;\r\n                summarydata.totalconfirmed = data.cases_time_series[data.cases_time_series.length - 1].totalconfirmed;\r\n                summarydata.totaldeceased = data.cases_time_series[data.cases_time_series.length - 1].totaldeceased;\r\n                summarydata.totalrecovered = data.cases_time_series[data.cases_time_series.length - 1].totalrecovered;\r\n                summarydata.totalactive = summarydata.totalconfirmed - summarydata.totalrecovered - summarydata.totaldeceased;\r\n                summarydata.deathRate = parseFloat(((parseInt(summarydata.totaldeceased) / parseInt(summarydata.totalconfirmed)) * 100).toFixed(2));\r\n                summarydata.recoveryRate = parseFloat(((parseInt(summarydata.totalrecovered) / parseInt(summarydata.totalconfirmed)) * 100).toFixed(2));\r\n                setSummarydata(summarydata);\r\n\r\n                let postivetrend = {\r\n                    daily: { data: [], categories: [], color: \"#ff0000\" },\r\n                    cummulative: { data: [], categories: [], color: \"#ff0000\" }\r\n                };\r\n                let recoveredtrend = {\r\n                    daily: { data: [], categories: [], color: \"#33cc33\" },\r\n                    cummulative: { data: [], categories: [], color: \"#33cc33\" }\r\n                };\r\n                let deathtrend = {\r\n                    daily: { data: [], categories: [], color: \"#888888\" },\r\n                    cummulative: { data: [], categories: [], color: \"#888888\" }\r\n                };\r\n                let activetrend = {\r\n                    daily: { data: [], categories: [], color: \"#3366ff\" },\r\n                    cummulative: { data: [], categories: [], color: \"#3366ff\" }\r\n                };\r\n\r\n                let StateMetrics = {\r\n                    highestConfirmed: { state: \"\", value: \"\" },\r\n                    lowestConfirmed: { state: \"\", value: \"\" },\r\n                    highestDeaths: { state: \"\", value: \"\" },\r\n                    lowestDeaths: { state: \"\", value: \"\" },\r\n                    highestRecoverRate: { state: \"\", value: \"\" },\r\n                    lowestRecoverRate: { state: \"\", value: \"\" },\r\n                    highestDeathRate: { state: \"\", value: \"\" },\r\n                    lowestDeathRate: { state: \"\", value: \"\" },\r\n                };\r\n\r\n                data.cases_time_series.forEach(element => {\r\n                    postivetrend.daily.data.push(parseInt(element.dailyconfirmed));\r\n                    postivetrend.daily.categories.push((element.date).toString());\r\n                    postivetrend.cummulative.data.push(parseInt(element.totalconfirmed));\r\n                    postivetrend.cummulative.categories.push((element.date).toString());\r\n\r\n                    recoveredtrend.daily.data.push(parseInt(element.dailyrecovered));\r\n                    recoveredtrend.daily.categories.push((element.date).toString());\r\n                    recoveredtrend.cummulative.data.push(parseInt(element.totalrecovered));\r\n                    recoveredtrend.cummulative.categories.push((element.date).toString());\r\n\r\n\r\n                    deathtrend.daily.data.push(parseInt(element.dailydeceased));\r\n                    deathtrend.daily.categories.push((element.date).toString());\r\n                    deathtrend.cummulative.data.push(parseInt(element.totaldeceased));\r\n                    deathtrend.cummulative.categories.push((element.date).toString());\r\n\r\n                    activetrend.daily.data.push(parseInt(element.dailyconfirmed - element.dailyrecovered - element.dailydeceased));\r\n                    activetrend.daily.categories.push((element.date).toString());\r\n                    activetrend.cummulative.data.push(parseInt(element.totalconfirmed - element.totalrecovered - element.totaldeceased));\r\n                    activetrend.cummulative.categories.push((element.date).toString());\r\n\r\n\r\n                });\r\n                var stateWiseData = [];\r\n                var stateWiseDataOnly = [];\r\n                data.statewise.forEach((element) => {\r\n                    stateWiseData.push({\r\n                        state: element.state,\r\n                        confirmed: parseInt(element.confirmed),\r\n                        recovered: parseInt(element.recovered),\r\n                        deaths: parseInt(element.deaths),\r\n                        recoveryRate: parseInt(element.confirmed) === 0.00 ? 0 : (((parseInt(element.recovered) / parseInt(element.confirmed)) * 100).toFixed(2)),\r\n                        deathRate: parseInt(element.confirmed) === 0 ? 0.00 : (((parseInt(element.deaths) / parseInt(element.confirmed)) * 100).toFixed(2))\r\n\r\n                    })\r\n\r\n                    if (!UTs.includes(element.statecode)) {\r\n                        stateWiseDataOnly.push({\r\n                            state: element.state,\r\n                            confirmed: parseInt(element.confirmed),\r\n                            recovered: parseInt(element.recovered),\r\n                            deaths: parseInt(element.deaths),\r\n                            recoveryRate: parseInt(element.confirmed) === 0.00 ? 0 : (((parseInt(element.recovered) / parseInt(element.confirmed)) * 100).toFixed(2)),\r\n                            deathRate: parseInt(element.confirmed) === 0 ? 0.00 : (((parseInt(element.deaths) / parseInt(element.confirmed)) * 100).toFixed(2))\r\n                        })\r\n                    }\r\n                });\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.confirmed - a.confirmed;\r\n                });\r\n\r\n                // let countbystate={\r\n                //     state:[],\r\n                //     count:[],\r\n                //     total:stateWiseDataOnly\r\n                // };\r\n                // stateWiseDataOnly.forEach(element => {\r\n                //     countbystate.state.push(element.state);\r\n                //     countbystate.count.push(element.confirmed);\r\n                // });\r\n                setstateWiseCount(stateWiseDataOnly);\r\n\r\n                StateMetrics.highestConfirmed.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestConfirmed.value = stateWiseDataOnly[0].confirmed;\r\n                StateMetrics.lowestConfirmed.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestConfirmed.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].confirmed;\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.deaths - a.deaths;\r\n                });\r\n\r\n                StateMetrics.highestDeaths.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestDeaths.value = stateWiseDataOnly[0].deaths;\r\n                StateMetrics.lowestDeaths.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestDeaths.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].deaths;\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.recoveryRate - a.recoveryRate;\r\n                });\r\n\r\n                StateMetrics.highestRecoverRate.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestRecoverRate.value = stateWiseDataOnly[0].recoveryRate;\r\n                StateMetrics.lowestRecoverRate.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestRecoverRate.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].recoveryRate;\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.deathRate - a.deathRate;\r\n                });\r\n\r\n                StateMetrics.highestDeathRate.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestDeathRate.value = stateWiseDataOnly[0].deathRate;\r\n                StateMetrics.lowestDeathRate.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestDeathRate.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].deathRate;\r\n\r\n                console.log(StateMetrics);\r\n\r\n                // console.log(postivetrend);\r\n                setStateMetric(StateMetrics);\r\n                setPostivetrend(postivetrend);\r\n                setRecoveredtrend(recoveredtrend);\r\n                setDeathtrend(deathtrend);\r\n                setstatewisetrend(stateWiseData);\r\n                setActivetrend(activetrend);\r\n                setStateDataAvailable(true);\r\n                setDataavailable(true);\r\n            })\r\n    }, []);\r\n\r\n    function numberFormatter(number) {\r\n        return new Intl.NumberFormat('en-IN').format(number)\r\n    }\r\n\r\n\r\n    return (<div>\r\n        <div className=\"summary row mr-lf-25\">\r\n            <div className=\"col-sm-3 summary-card\">\r\n                {isdatavailable && <ChartCard totalValue={numberFormatter(summarydata.totalconfirmed)}\r\n                    dailyValue={numberFormatter(summarydata.dailyconfirmed)}\r\n                    title=\"Confirmed Cases\"\r\n                    data={postivetrend.daily.data}\r\n                    labels={postivetrend.daily.categories}\r\n                    color=\"red\"\r\n                    chartColor={postivetrend.daily.color}>\r\n                </ChartCard>}\r\n            </div>\r\n            <div className=\"col-sm-3 summary-card\">\r\n                {isdatavailable && <ChartCard totalValue={numberFormatter(summarydata.totalrecovered)}\r\n                    dailyValue={numberFormatter(summarydata.dailyrecovered)}\r\n                    title=\"Recovered\"\r\n                    data={recoveredtrend.daily.data}\r\n                    labels={recoveredtrend.daily.categories}\r\n                    color=\"green\"\r\n                    chartColor={recoveredtrend.daily.color}>\r\n\r\n                </ChartCard>}\r\n            </div>\r\n\r\n            <div className=\"col-sm-3 summary-card\">\r\n                {isdatavailable && <ChartCard totalValue={numberFormatter(summarydata.totaldeceased)}\r\n                    dailyValue={numberFormatter(summarydata.dailydeceased)}\r\n                    title=\"Deaths\"\r\n                    data={deathtrend.daily.data}\r\n                    labels={deathtrend.daily.categories}\r\n                    color=\"grey\"\r\n                    chartColor={deathtrend.daily.color}>\r\n\r\n                </ChartCard>}\r\n            </div>\r\n\r\n            <div className=\"col-sm-3 summary-card\">\r\n                {isdatavailable && <ChartCard totalValue={numberFormatter(summarydata.totalactive)}\r\n                    dailyValue={numberFormatter(summarydata.dailyactive)}\r\n                    title=\"Active Cases\"\r\n                    data={activetrend.cummulative.data}\r\n                    labels={activetrend.cummulative.categories}\r\n                    color=\"grey\"\r\n                    chartColor={activetrend.daily.color}>\r\n\r\n                </ChartCard>}\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"row mr-lr-0\" style={{ marginBottom: 18 }}>\r\n            <div className=\"col-sm-9\">\r\n                {isdatavailable && <StateMetricChart data={stateWiseCount}></StateMetricChart>}\r\n\r\n            </div>\r\n            <div className=\"col-sm-3\">\r\n                <Paper className=\"radialCard\">\r\n                    <div className=\"row col-sm-12 mr-lr-0 center\">\r\n                        {isdatavailable && <RadialBar color={recoveredtrend.daily.color} name=\"Recovery Rate\" value={summarydata.recoveryRate}></RadialBar>}\r\n                    </div>\r\n                    <div className=\"row col-sm-12 mr-lr-0 center\">\r\n                        {isdatavailable && <RadialBar color={deathtrend.daily.color} name=\"Death Rate\" value={summarydata.deathRate}></RadialBar>}\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n        <div className=\"row mr-lr-0\">\r\n            <div className=\"col-sm-9\">\r\n                <Paper className=\"summary barchart\">\r\n                    <div className=\"row bar-heading\">\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"chart-title\">Confirmed Cases Trend</span>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"switch-button\">Daily</span>\r\n                            <Switch\r\n                                checked={state.checkedPostive}\r\n                                onChange={handleChange}\r\n                                name=\"checkedPostive\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            <span className=\"switch-button\">Cumulative</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {isdatavailable && !state.checkedPostive && <Barchart data={postivetrend.daily.data} categories={postivetrend.daily.categories} color={postivetrend.daily.color}></Barchart>}\r\n                        {isdatavailable && state.checkedPostive && <LineChart data={postivetrend.cummulative.data} categories={postivetrend.cummulative.categories} color={postivetrend.cummulative.color}></LineChart>}\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"summary barchart\">\r\n                    <div className=\"row bar-heading\">\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"chart-title\">Recovered Cases Trend</span>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"switch-button\">Daily</span>\r\n                            <Switch\r\n                                checked={state.checkedRecover}\r\n                                onChange={handleChange}\r\n                                name=\"checkedRecover\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            <span className=\"switch-button\">Cumulative</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {isdatavailable && !state.checkedRecover && <Barchart data={recoveredtrend.daily.data} categories={recoveredtrend.daily.categories} color={recoveredtrend.daily.color}></Barchart>}\r\n                        {isdatavailable && state.checkedRecover && <LineChart data={recoveredtrend.cummulative.data} categories={recoveredtrend.cummulative.categories} color={recoveredtrend.cummulative.color}></LineChart>}\r\n\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"summary barchart\">\r\n                    <div className=\"row bar-heading\">\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"chart-title\">Death Cases Trend</span>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"switch-button\">Daily</span>\r\n                            <Switch\r\n                                checked={state.checkedDeath}\r\n                                onChange={handleChange}\r\n                                name=\"checkedDeath\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            <span className=\"switch-button\">Cumulative</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {isdatavailable && !state.checkedDeath && <Barchart data={deathtrend.daily.data} categories={deathtrend.daily.categories} color={deathtrend.daily.color}></Barchart>}\r\n                        {isdatavailable && state.checkedDeath && <LineChart data={deathtrend.cummulative.data} categories={deathtrend.cummulative.categories} color={deathtrend.cummulative.color}></LineChart>}\r\n\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"summary barchart\">\r\n                    <div className=\"bar-heading\">\r\n                        <span className=\"chart-title\">State wise Cases</span>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {isStateDataAvailable && <EnhancedTable data={statewisetrend}></EnhancedTable>}\r\n                    </div>\r\n                </Paper>\r\n                <div className=\"heightSeparator\">\r\n                </div>\r\n            </div>\r\n            {isStateDataAvailable && <div className=\"col-sm-3\">\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Confirmed Cases</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.highestConfirmed.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestConfirmed.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Lowest Confirmed Cases</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.lowestConfirmed.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestConfirmed.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Recovery Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.highestRecoverRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestRecoverRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with  Lowest Recovery Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.lowestRecoverRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestRecoverRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Deaths</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.highestDeaths.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestDeaths.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Lowest Deaths</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.lowestDeaths.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestDeaths.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Death Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.highestDeathRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestDeathRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Lowest Death Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.lowestDeathRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestDeathRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n\r\n\r\n            </div>\r\n            }\r\n        </div>\r\n    </div>);\r\n\r\n}\r\n\r\n\r\n\r\nexport default NationalDashboard;","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport './Fontawesome';\r\n//import './components/dashboard.css';\r\nimport NationalDashboard from './components/national-dashboard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"dashboard-content\">\r\n    <div className=\"header\">\r\n    <span class=\"title\">COVID-19 Dashboard</span>\r\n    </div>  \r\n    <NationalDashboard></NationalDashboard>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// eslint-disable-next-line\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// eslint-disable-next-line\r\nimport $ from'jquery';\r\n// eslint-disable-next-line\r\n//import Popper from 'popper.js';\r\n// eslint-disable-next-line\r\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}