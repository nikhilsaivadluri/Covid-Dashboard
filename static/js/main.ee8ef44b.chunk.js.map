{"version":3,"sources":["Fontawesome.js","components/barchart.js","components/lineChart.js","components/custom-table.js","components/national-dashboard.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faCode","faHighlighter","faArrowCircleDown","faArrowCircleUp","faArrowUp","Barchar","props","useState","options","series","chartdata","setChartdata","useEffect","colors","color","chart","id","foreColor","tooltip","y","formatter","value","seriesIndex","dataPointIndex","w","Intl","NumberFormat","format","xaxis","categories","labeles","hideOverlappingLabels","dataLabels","enabled","name","data","type","width","height","LineChart","console","log","annotations","x","borderColor","label","style","background","text","descendingComparator","a","b","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","classes","order","onRequestSort","TableHead","TableRow","map","headCell","TableCell","key","align","padding","sortDirection","className","cellheader","join","TableSortLabel","active","direction","onClick","property","event","visuallyHidden","useStyles","makeStyles","theme","root","paper","marginBottom","spacing","table","minWidth","border","clip","margin","overflow","position","top","container","maxHeight","whiteText","fontSize","backgroundColor","fontWeight","red","green","EnhancedTable","React","setOrder","setOrderBy","rowsData","setRowData","numberFormatter","number","TableContainer","Table","aria-labelledby","size","stickyHeader","aria-label","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","row","hover","tabIndex","state","component","scope","confirmed","recovered","deaths","recoveryRate","deathRate","NationalDashboard","summarydata","setSummarydata","daily","cummulative","postivetrend","setPostivetrend","recoveredtrend","setRecoveredtrend","deathtrend","setDeathtrend","stateMetric","setStateMetric","checkedPostive","checkedRecover","checkedDeath","setState","statewisetrend","setstatewisetrend","isStateDataAvailable","setStateDataAvailable","UTs","handleChange","target","checked","fetch","then","response","json","dailyconfirmed","cases_time_series","length","dailydeceased","dailyrecovered","dailyactive","totalconfirmed","totaldeceased","totalrecovered","totalactive","parseInt","toFixed","StateMetrics","highestConfirmed","lowestConfirmed","highestDeaths","lowestDeaths","highestRecoverRate","lowestRecoverRate","highestDeathRate","lowestDeathRate","forEach","element","push","date","toString","stateWiseData","stateWiseDataOnly","statewise","includes","statecode","Paper","icon","Switch","onChange","inputProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee8ef44b.chunk.js","sourcesContent":["// import the library\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\n// import your icons\r\nimport { faCode, faHighlighter,faArrowCircleDown,faArrowCircleUp,faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(\r\n  faCode,\r\n  faHighlighter,\r\n  faArrowCircleDown,\r\n  faArrowCircleUp,\r\n  faArrowUp\r\n  // more icons go here\r\n);","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\n\r\nfunction Barchar(props) {\r\n    const [chartdata, setChartdata] = useState({options:{},series:[]});\r\n\r\n    useEffect(() => {\r\n      //  console.log(props);\r\n\r\n        var options = {\r\n            colors: [props.color],\r\n            chart: {\r\n                id: \"basic-bar\",\r\n                foreColor: 'blue'\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                  formatter: function(value, { series, seriesIndex, dataPointIndex, w }) {\r\n                    return new Intl.NumberFormat('en-IN').format(value)\r\n                  }\r\n                }\r\n            },\r\n            xaxis: {\r\n                categories: props.categories,\r\n                labeles: {\r\n                    hideOverlappingLabels: true,\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n   \r\n        }\r\n\r\n        var series = [\r\n            {\r\n                name: \"count\",\r\n                data: props.data\r\n            }]\r\n            setChartdata({options:options,series:series})\r\n    },[props])\r\n\r\n    return (\r\n        <div>\r\n            <Chart\r\n                options={chartdata.options}\r\n                series={chartdata.series}\r\n                type=\"bar\"\r\n                width=\"100%\"\r\n                height=\"500px\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Barchar;","import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nfunction LineChart(props) {\r\n\r\n    const [chartdata, setChartdata] = useState({ options: {}, series: [] });\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props);\r\n\r\n        var options = {\r\n            colors: [props.color],\r\n            chart: {\r\n                id: \"basic-bar\",\r\n                foreColor: 'blue'\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                  formatter: function(value, { series, seriesIndex, dataPointIndex, w }) {\r\n                    return new Intl.NumberFormat('en-IN').format(value)\r\n                  }\r\n                }\r\n            },\r\n            annotations: {\r\n                xaxis: [\r\n                  {\r\n                    x:\"31 May \",\r\n                    borderColor: '#c2c2c2',\r\n                    label: {\r\n                      style: {\r\n                        color: 'black',\r\n                        background:'#0080ff'\r\n                      },\r\n                      text: 'Lock Down Ended'\r\n                    }\r\n                  }\r\n                ]\r\n              },\r\n            xaxis: {\r\n                categories: props.categories,\r\n                labeles: {\r\n                    hideOverlappingLabels: true,\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n                \r\n            },\r\n\r\n        }\r\n\r\n        var series = [\r\n            {\r\n                name: \"count\",\r\n                data: props.data\r\n            }]\r\n      //  console.log({ options: options, series: series })\r\n        setChartdata({ options: options, series: series })\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n            <Chart\r\n                options={chartdata.options}\r\n                series={chartdata.series}\r\n                type=\"line\"\r\n                width=\"100%\"\r\n                height=\"500px\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineChart;","import React,{ useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {  makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'state', numeric: false, disablePadding: false, label: 'State' },\r\n  { id: 'confirmed', numeric: true, disablePadding: false, label: 'Confirmed Cases' },\r\n  { id: 'recovered', numeric: true, disablePadding: false, label: 'Recovered' },\r\n  { id: 'deaths', numeric: true, disablePadding: false, label: 'Deaths' },\r\n  { id: 'recoveryRate', numeric: true, disablePadding: false, label: 'Recovery Rate' },\r\n  { id: 'deathRate', numeric: true, disablePadding: false, label: 'Death Rate' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes,  order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.id===\"state\" ?\"left\":\"right\"}\r\n            padding=\"none\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={[classes.cellheader].join(' ')}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  container: {\r\n    maxHeight: 500,\r\n  },\r\n  whiteText:{\r\n    color:'#f0ffff',\r\n    fontSize: 12,\r\n    \r\n  },\r\n  cellheader:{\r\n    backgroundColor:'#2b72dd',\r\n    fontSize: 12,\r\n    fontWeight: 600,\r\n    padding:6,\r\n\r\n  },\r\n  red:{\r\n    color:\"#ff0000\",\r\n    fontSize: 12,\r\n    fontWeight: 600\r\n  },\r\n  green:{\r\n    color:\"#33cc33\",\r\n    fontSize: 12,\r\n    fontWeight: 600\r\n  }\r\n\r\n\r\n}));\r\n\r\nexport default function EnhancedTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('confirmed');\r\n  //const [selected, setSelected] = React.useState([]);\r\n  //const [dense, setDense] = React.useState(false);\r\n  const [rowsData,setRowData]=React.useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n  //  console.log(props);\r\n   setRowData(props.data);\r\n  },[props]);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  function numberFormatter(number) {\r\n    return new Intl.NumberFormat('en-IN').format(number)\r\n}\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <TableContainer className={classes.container}>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            stickyHeader aria-label=\"sticky table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rowsData, getComparator(order, orderBy))\r\n                .map((row, index) => {\r\n                \r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      tabIndex={-1}\r\n                      key={row.state}\r\n                      className={classes.whiteText}\r\n                    >\r\n                     \r\n                      <TableCell className={classes.whiteText} component=\"th\"  scope=\"row\" >\r\n                        {row.state}\r\n                      </TableCell>\r\n                      <TableCell className={classes.red}  align=\"right\">{numberFormatter(row.confirmed)}</TableCell>\r\n                      <TableCell className={classes.green}  align=\"right\">{numberFormatter(row.recovered)}</TableCell>\r\n                      <TableCell className={classes.red}  align=\"right\">{numberFormatter(row.deaths)}</TableCell>\r\n                      <TableCell className={classes.green}  align=\"right\">{row.recoveryRate}%</TableCell>\r\n                      <TableCell className={classes.red}  align=\"right\">{row.deathRate}%</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n//import ReactDOM from 'react-dom';\r\n//import './dashboard.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import Chart from \"react-apexcharts\";\r\nimport Barchart from './barchart';\r\nimport LineChart from './lineChart';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport EnhancedTable from './custom-table';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nfunction NationalDashboard() {\r\n    const [summarydata, setSummarydata] = useState({});\r\n    const [postivetrend, setPostivetrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    const [recoveredtrend, setRecoveredtrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    const [deathtrend, setDeathtrend] = useState({ daily: { data: [], categories: [] }, cummulative: { data: [], categories: [] } });\r\n    // const [isdatavailable, setDataavailable] = useState(false);\r\n    const [stateMetric, setStateMetric] = useState({});\r\n    const [state, setState] = useState({\r\n        checkedPostive: false,\r\n        checkedRecover: false,\r\n        checkedDeath: false,\r\n    });\r\n    const [statewisetrend, setstatewisetrend] = useState({});\r\n    const [isStateDataAvailable, setStateDataAvailable] = useState(false);\r\n    const UTs = [\"DN\", \"CH\", \"LA\", \"AN\", \"PY\", \"TT\", \"UN\", \"LD\"];\r\n    const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.covid19india.org/data.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // console.log(data); \r\n                //console.log(data.cases_time_series.length-1);\r\n                let summarydata = {};\r\n                summarydata.dailyconfirmed = data.cases_time_series[data.cases_time_series.length - 1].dailyconfirmed;\r\n                summarydata.dailydeceased = data.cases_time_series[data.cases_time_series.length - 1].dailydeceased;\r\n                summarydata.dailyrecovered = data.cases_time_series[data.cases_time_series.length - 1].dailyrecovered;\r\n                summarydata.dailyactive = summarydata.dailyconfirmed - summarydata.dailydeceased - summarydata.dailyrecovered;\r\n                summarydata.totalconfirmed = data.cases_time_series[data.cases_time_series.length - 1].totalconfirmed;\r\n                summarydata.totaldeceased = data.cases_time_series[data.cases_time_series.length - 1].totaldeceased;\r\n                summarydata.totalrecovered = data.cases_time_series[data.cases_time_series.length - 1].totalrecovered;\r\n                summarydata.totalactive = summarydata.totalconfirmed - summarydata.totalrecovered - summarydata.totaldeceased;\r\n                summarydata.deathRate = (((parseInt(summarydata.totaldeceased) / parseInt(summarydata.totalconfirmed)) * 100).toFixed(2));\r\n                summarydata.recoveryRate = (((parseInt(summarydata.totalrecovered) / parseInt(summarydata.totalconfirmed)) * 100).toFixed(2));\r\n                setSummarydata(summarydata);\r\n\r\n                let postivetrend = {\r\n                    daily: { data: [], categories: [], color: \"#ff0000\" },\r\n                    cummulative: { data: [], categories: [], color: \"#ff0000\" }\r\n                };\r\n                let recoveredtrend = {\r\n                    daily: { data: [], categories: [], color: \"#33cc33\" },\r\n                    cummulative: { data: [], categories: [], color: \"#33cc33\" }\r\n                };\r\n                let deathtrend = {\r\n                    daily: { data: [], categories: [], color: \"#ff0000\" },\r\n                    cummulative: { data: [], categories: [], color: \"#ff0000\" }\r\n                };\r\n\r\n                let StateMetrics = {\r\n                    highestConfirmed: { state: \"\", value: \"\" },\r\n                    lowestConfirmed: { state: \"\", value: \"\" },\r\n                    highestDeaths: { state: \"\", value: \"\" },\r\n                    lowestDeaths: { state: \"\", value: \"\" },\r\n                    highestRecoverRate: { state: \"\", value: \"\" },\r\n                    lowestRecoverRate: { state: \"\", value: \"\" },\r\n                    highestDeathRate: { state: \"\", value: \"\" },\r\n                    lowestDeathRate: { state: \"\", value: \"\" },\r\n                };\r\n\r\n                data.cases_time_series.forEach(element => {\r\n                    postivetrend.daily.data.push(parseInt(element.dailyconfirmed));\r\n                    postivetrend.daily.categories.push((element.date).toString());\r\n                    postivetrend.cummulative.data.push(parseInt(element.totalconfirmed));\r\n                    postivetrend.cummulative.categories.push((element.date).toString());\r\n\r\n                    recoveredtrend.daily.data.push(parseInt(element.dailyrecovered));\r\n                    recoveredtrend.daily.categories.push((element.date).toString());\r\n                    recoveredtrend.cummulative.data.push(parseInt(element.totalrecovered));\r\n                    recoveredtrend.cummulative.categories.push((element.date).toString());\r\n\r\n\r\n                    deathtrend.daily.data.push(parseInt(element.dailydeceased));\r\n                    deathtrend.daily.categories.push((element.date).toString());\r\n                    deathtrend.cummulative.data.push(parseInt(element.totaldeceased));\r\n                    deathtrend.cummulative.categories.push((element.date).toString());\r\n\r\n                });\r\n                var stateWiseData = [];\r\n                var stateWiseDataOnly = [];\r\n                data.statewise.forEach((element) => {\r\n                    stateWiseData.push({\r\n                        state: element.state,\r\n                        confirmed: parseInt(element.confirmed),\r\n                        recovered: parseInt(element.recovered),\r\n                        deaths: parseInt(element.deaths),\r\n                        recoveryRate: parseInt(element.confirmed) === 0.00 ? 0 : (((parseInt(element.recovered) / parseInt(element.confirmed)) * 100).toFixed(2)),\r\n                        deathRate: parseInt(element.confirmed) === 0 ? 0.00 : (((parseInt(element.deaths) / parseInt(element.confirmed)) * 100).toFixed(2))\r\n\r\n                    })\r\n\r\n                    if (!UTs.includes(element.statecode)) {\r\n                        stateWiseDataOnly.push({\r\n                            state: element.state,\r\n                            confirmed: parseInt(element.confirmed),\r\n                            recovered: parseInt(element.recovered),\r\n                            deaths: parseInt(element.deaths),\r\n                            recoveryRate: parseInt(element.confirmed) === 0.00 ? 0 : (((parseInt(element.recovered) / parseInt(element.confirmed)) * 100).toFixed(2)),\r\n                            deathRate: parseInt(element.confirmed) === 0 ? 0.00 : (((parseInt(element.deaths) / parseInt(element.confirmed)) * 100).toFixed(2))\r\n                        })\r\n                    }\r\n                });\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.confirmed - a.confirmed;\r\n                });\r\n\r\n                StateMetrics.highestConfirmed.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestConfirmed.value = stateWiseDataOnly[0].confirmed;\r\n                StateMetrics.lowestConfirmed.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestConfirmed.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].confirmed;\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.deaths - a.deaths;\r\n                });\r\n\r\n                StateMetrics.highestDeaths.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestDeaths.value = stateWiseDataOnly[0].deaths;\r\n                StateMetrics.lowestDeaths.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestDeaths.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].deaths;\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.recoveryRate - a.recoveryRate;\r\n                });\r\n\r\n                StateMetrics.highestRecoverRate.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestRecoverRate.value = stateWiseDataOnly[0].recoveryRate;\r\n                StateMetrics.lowestRecoverRate.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestRecoverRate.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].recoveryRate;\r\n\r\n                stateWiseDataOnly.sort((a, b) => {\r\n                    return b.deathRate - a.deathRate;\r\n                });\r\n\r\n                StateMetrics.highestDeathRate.state = stateWiseDataOnly[0].state;\r\n                StateMetrics.highestDeathRate.value = stateWiseDataOnly[0].deathRate;\r\n                StateMetrics.lowestDeathRate.state = stateWiseDataOnly[stateWiseDataOnly.length - 1].state;\r\n                StateMetrics.lowestDeathRate.value = stateWiseDataOnly[stateWiseDataOnly.length - 1].deathRate;\r\n\r\n                console.log(StateMetrics);\r\n\r\n                // console.log(postivetrend);\r\n                setStateMetric(StateMetrics);\r\n                setPostivetrend(postivetrend);\r\n                setRecoveredtrend(recoveredtrend);\r\n                setDeathtrend(deathtrend);\r\n                setstatewisetrend(stateWiseData);\r\n                setStateDataAvailable(true);\r\n\r\n            })\r\n    }, []);\r\n\r\n    function numberFormatter(number) {\r\n        return new Intl.NumberFormat('en-IN').format(number)\r\n    }\r\n\r\n\r\n    return (<div>\r\n        <div className=\"summary row mr-lf-25\">\r\n            <div className=\"col-sm-2 summary-card\">\r\n                <Paper className=\"card-content\">\r\n                    <div className=\"card-heading\">\r\n                        <span>Confirmed Cases</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <span className=\"red\">{numberFormatter(summarydata.totalconfirmed)}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(summarydata.dailyconfirmed)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-up\" />\r\n                    </div>\r\n                </Paper>\r\n\r\n            </div>\r\n            <div className=\"col-sm-2 summary-card\">\r\n                <Paper className=\"card-content\">\r\n                    <div className=\"card-heading\">\r\n                        <span>Active Cases</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <span className=\"red\">{numberFormatter(summarydata.totalactive)}</span>\r\n                    </div>\r\n                    {summarydata.dailyactive > 0 && <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span>{numberFormatter(summarydata.dailyactive)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-up\" />\r\n                    </div>}\r\n                    {summarydata.dailyactive <= 0 && <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span>{numberFormatter(summarydata.dailyactive)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-down\" />\r\n                    </div>}\r\n                </Paper>\r\n            </div>\r\n            <div className=\"col-sm-2 summary-card\">\r\n                <Paper className=\"card-content\">\r\n                    <div className=\"card-heading\">\r\n                        <span>Recovered</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <span className=\"green\">{numberFormatter(summarydata.totalrecovered)}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span>{numberFormatter(summarydata.dailyrecovered)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-up\" />\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n            <div className=\"col-sm-2 summary-card\">\r\n                <Paper className=\"card-content\">\r\n                    <div className=\"card-heading\">\r\n                        <span  >Deaths</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <span className=\"grey\">{numberFormatter(summarydata.totaldeceased)}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"grey\"].join(\" \")}>\r\n                        <span>{numberFormatter(summarydata.dailydeceased)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-up\" />\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n            <div className=\"col-sm-2 summary-card\">\r\n                <Paper className=\"card-content\">\r\n                    <div className=\"card-heading\">\r\n                        <span>Recovery Rate</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <span className={[\"green\", \"percentCard\"].join(\" \")}>{numberFormatter(summarydata.recoveryRate)}%</span>\r\n                    </div>\r\n                    {/* <div className=\"card-variance\">\r\n                        <span>{numberFormatter(summarydata.recoveryRate)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-up\" />\r\n                    </div> */}\r\n                </Paper>\r\n            </div>\r\n            <div className=\"col-sm-2 summary-card\">\r\n                <Paper className=\"card-content\">\r\n                    <div className=\"card-heading\">\r\n                        <span>Death Rate</span>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <span className={[\"grey\", \"percentCard\"].join(\" \")}>{numberFormatter(summarydata.deathRate)}%</span>\r\n                    </div>\r\n                    {/* <div className=\"card-variance\">\r\n                        <span>{numberFormatter(summarydata.deathRate)}</span>\r\n                        <FontAwesomeIcon icon=\"arrow-up\" />\r\n                    </div> */}\r\n                </Paper>\r\n            </div>\r\n\r\n        </div>\r\n        <div className=\"row mr-lr-0\">\r\n            <div className=\"col-sm-9\">\r\n                <Paper className=\"summary barchart\">\r\n                    <div className=\"row bar-heading\">\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"chart-title\">Confirmed Cases Trend</span>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"switch-button\">Daily</span>\r\n                            <Switch\r\n                                checked={state.checkedPostive}\r\n                                onChange={handleChange}\r\n                                name=\"checkedPostive\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            <span className=\"switch-button\">Cumulative</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {!state.checkedPostive && <Barchart data={postivetrend.daily.data} categories={postivetrend.daily.categories} color={postivetrend.daily.color}></Barchart>}\r\n                        {state.checkedPostive && <LineChart data={postivetrend.cummulative.data} categories={postivetrend.cummulative.categories} color={postivetrend.cummulative.color}></LineChart>}\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"summary barchart\">\r\n                <div className=\"row bar-heading\">\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"chart-title\">Recovered Cases Trend</span>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"switch-button\">Daily</span>\r\n                            <Switch\r\n                                checked={state.checkedRecover}\r\n                                onChange={handleChange}\r\n                                name=\"checkedRecover\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            <span className=\"switch-button\">Cumulative</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {!state.checkedRecover && <Barchart data={recoveredtrend.daily.data} categories={recoveredtrend.daily.categories} color={recoveredtrend.daily.color}></Barchart>}\r\n                        {state.checkedRecover && <LineChart data={recoveredtrend.cummulative.data} categories={recoveredtrend.cummulative.categories} color={recoveredtrend.cummulative.color}></LineChart>}\r\n\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"summary barchart\">\r\n                <div className=\"row bar-heading\">\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"chart-title\">Death Cases Trend</span>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <span className=\"switch-button\">Daily</span>\r\n                            <Switch\r\n                                checked={state.checkedDeath}\r\n                                onChange={handleChange}\r\n                                name=\"checkedDeath\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            <span className=\"switch-button\">Cumulative</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {!state.checkedDeath && <Barchart data={deathtrend.daily.data} categories={deathtrend.daily.categories} color={deathtrend.daily.color}></Barchart>}\r\n                        {state.checkedDeath && <LineChart data={deathtrend.cummulative.data} categories={deathtrend.cummulative.categories} color={deathtrend.cummulative.color}></LineChart>}\r\n\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"summary barchart\">\r\n                    <div className=\"bar-heading\">\r\n                        <span className=\"chart-title\">State Wise Case</span>\r\n                    </div>\r\n                    <div className=\"bar-body\">\r\n                        {isStateDataAvailable && <EnhancedTable data={statewisetrend}></EnhancedTable>}\r\n                    </div>\r\n                </Paper>\r\n                <div className=\"heightSeparator\">\r\n                </div>\r\n            </div>\r\n            {isStateDataAvailable && <div className=\"col-sm-3\">\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Confirmed Cases</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.highestConfirmed.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestConfirmed.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Lowest Confirmed Cases</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.lowestConfirmed.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestConfirmed.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Recovery Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.highestRecoverRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestRecoverRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with  Lowest Recovery Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.lowestRecoverRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestRecoverRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Deaths</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.highestDeaths.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestDeaths.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Lowest Deaths</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.lowestDeaths.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestDeaths.value)}</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Highest Death Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"red\">{stateMetric.highestDeathRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"red\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.highestDeathRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n                <Paper className=\"stateCardContent\">\r\n                    <div className=\"stateCardHeading\">\r\n                        <span>State with Lowest Death Rate</span>\r\n                    </div>\r\n                    <div className=\"stateCardBody\">\r\n                        <span className=\"green\">{stateMetric.lowestDeathRate.state}</span>\r\n                    </div>\r\n                    <div className={[\"card-variance\", \"green\"].join(\" \")}>\r\n                        <span >{numberFormatter(stateMetric.lowestDeathRate.value)}%</span>\r\n                    </div>\r\n                </Paper>\r\n\r\n\r\n            </div>\r\n            }\r\n        </div>\r\n    </div>);\r\n\r\n}\r\n\r\nexport default NationalDashboard;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport './Fontawesome';\n//import './components/dashboard.css';\nimport NationalDashboard from './components/national-dashboard';\n\nfunction App() {\n  return (\n    <div className=\"dashboard-content\">\n    <div className=\"header\">\n    <h1>Covid-19 Dashboard</h1>\n    </div>  \n    <NationalDashboard></NationalDashboard>\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// eslint-disable-next-line\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// eslint-disable-next-line\nimport $ from'jquery';\n// eslint-disable-next-line\n//import Popper from 'popper.js';\n// eslint-disable-next-line\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}